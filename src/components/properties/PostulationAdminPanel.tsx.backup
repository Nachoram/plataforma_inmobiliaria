/**
 * PostulationAdminPanel.tsx
 * 
 * Componente dedicado para la gesti√≥n administrativa de postulaciones de propiedades.
 * 
 * RESPONSABILIDADES:
 * - Mostrar tabla de postulaciones con informaci√≥n clave (nombre, fecha, score, estado)
 * - Administrar cada postulaci√≥n mediante modal de detalles
 * - Proveer acciones administrativas: Solicitar Informe Comercial, Solicitar Documentaci√≥n, 
 *   Enviar Documentos, Aceptar Postulaci√≥n (Generar Contrato)
 * - Integraci√≥n con RentalContractConditionsForm para generaci√≥n de contratos
 * 
 * VENTAJAS DE LA SEPARACI√ìN:
 * - Facilita el desarrollo de features y la futura integraci√≥n de roles/permisos
 * - Permite escalar el panel de administraci√≥n sin impactar el core inmobiliario
 * - Reduce el acoplamiento y acelera la evoluci√≥n de UI/UX
 * - Mejora testabilidad y mantenibilidad del c√≥digo
 * 
 * @module PostulationAdminPanel
 * @since 2025-10-28
 */

import React, { useState, useEffect } from 'react';
import { toast } from 'react-hot-toast';
import { 
  Settings, 
  Mail, 
  Phone, 
  DollarSign, 
  Briefcase, 
  FileText, 
  UserCheck, 
  Copy, 
  CheckCircle, 
  AlertTriangle, 
  X,
  RotateCcw,
  Edit,
  Shield
} from 'lucide-react';
import { supabase, Property } from '../../lib/supabase';
import { RentalContractConditionsForm } from '../contracts/RentalContractConditionsForm';

// ========================================================================
// INTERFACES & TYPES
// ========================================================================

/**
 * Perfil del postulante con informaci√≥n b√°sica
 */
interface PostulantProfile {
  email: string;
  phone: string;
  income: number;
  employment: string;
}

/**
 * Informaci√≥n del aval (garante)
 */
interface GuarantorInfo {
  name: string;
  email: string;
  phone: string;
  income: number;
}

/**
 * Datos completos de una postulaci√≥n
 */
interface Postulation {
  id: number; // ID num√©rico para display en tabla
  applicationId: string; // UUID real de la aplicaci√≥n
  name: string;
  date: string;
  score: number;
  status: 'Aprobado' | 'Rechazado' | 'En Revisi√≥n';
  profile: PostulantProfile;
  guarantor: GuarantorInfo | null;
}

/**
 * Datos para modificaci√≥n de aceptaci√≥n
 */
interface AcceptanceModificationData {
  comments: string;
  adjustedScore?: number;
  additionalDocuments?: string;
  specialConditions?: string;
}

/**
 * Props del componente principal
 */
interface PostulationAdminPanelProps {
  propertyId: string;
  property: Property; // Necesario para generar el contrato
}

// ========================================================================
// HELPER FUNCTIONS FOR ERROR HANDLING
// ========================================================================

/**
 * Valida permisos para modificar postulaciones aceptadas
 * @param user - Usuario actual
 * @param property - Propiedad
 * @param selectedProfile - Perfil de postulaci√≥n seleccionado
 * @param operation - Nombre de la operaci√≥n para mensajes de error
 * @returns true si tiene permisos, false en caso contrario
 */
const validateModificationPermissions = (
  user: any,
  property: Property | undefined,
  selectedProfile: Postulation | null,
  operation: string
): boolean => {
  if (!user?.id) {
    toast.error('Debes estar autenticado para realizar esta acci√≥n');
    return false;
  }

  if (!property?.owner_id || property.owner_id !== user.id) {
    toast.error(`Solo el propietario de la propiedad puede ${operation}`);
    return false;
  }

  if (!selectedProfile) {
    toast.error('No hay postulaci√≥n seleccionada');
    return false;
  }

  if (selectedProfile.status !== 'Aprobado') {
    toast.error(`La postulaci√≥n debe estar en estado "Aprobado" para poder ${operation}`);
    return false;
  }

  return true;
};

/**
 * Formatea un error de Supabase para logging y display
 * @param error - Error object from Supabase or other sources
 * @param context - Context string describing where the error occurred
 * @returns Formatted error object with all details
 */
const formatErrorDetails = (error: any, context: string = '') => {
  const details = {
    context,
    message: error?.message || 'Error desconocido',
    code: error?.code || 'N/A',
    details: error?.details || 'Sin detalles adicionales',
    hint: error?.hint || 'Sin sugerencias',
    stack: error?.stack || 'Sin stack trace',
    statusCode: error?.statusCode || error?.status || 'N/A',
  };

  // Log completo en consola
  console.error(`‚ùå [ERROR] ${context}:`, details);

  return details;
};

/**
 * Genera un mensaje de error user-friendly a partir de un error de Supabase
 * @param error - Error object from Supabase
 * @param defaultMessage - Default message if no specific match is found
 * @returns User-friendly error message
 */
const getUserFriendlyErrorMessage = (error: any, defaultMessage: string = 'Ha ocurrido un error'): string => {
  if (!error) return defaultMessage;

  const message = error.message || '';

  // Check constraint violations
  if (message.includes('violates check constraint "check_monthly_payment_day"')) {
    return 'El d√≠a de pago debe estar entre 1 y 31';
  }
  if (message.includes('violates check constraint')) {
    return 'Datos inv√°lidos. Por favor verifica los campos ingresados.';
  }

  // Foreign key violations
  if (message.includes('violates foreign key constraint')) {
    return 'Referencia inv√°lida. Verifica que todos los datos relacionados existan.';
  }

  // Not-null constraint violations
  if (message.includes('violates not-null constraint')) {
    const match = message.match(/column "([^"]+)"/);
    const columnName = match ? match[1] : 'desconocido';
    return `Campo requerido faltante: ${columnName}`;
  }

  // Permission/RLS errors
  if (message.includes('permission denied') || message.includes('RLS') || message.includes('policy')) {
    return 'No tienes permisos para realizar esta acci√≥n. Verifica que seas el propietario.';
  }

  // Column doesn't exist (common in schema mismatches)
  if (message.includes('column') && message.includes('does not exist')) {
    const match = message.match(/column "?([^"]+)"?/i);
    const columnName = match ? match[1] : 'desconocida';
    return `Error de configuraci√≥n: La columna "${columnName}" no existe en la base de datos. Contacta al administrador.`;
  }

  // 400 errors
  if (error.code === '400' || error.statusCode === 400) {
    return `Error 400: ${message || error.details || 'Solicitud inv√°lida'}`;
  }

  // 404 errors
  if (error.code === '404' || error.statusCode === 404 || message.includes('not found')) {
    return 'El recurso solicitado no existe o no est√° disponible.';
  }

  // Network/Connection errors
  if (message.includes('fetch') || message.includes('network') || message.includes('connection')) {
    return 'Error de conexi√≥n. Verifica tu conexi√≥n a internet e intenta nuevamente.';
  }

  // Validation errors from backend
  if (message.includes('obligatorio') || message.includes('inv√°lido') || message.includes('debe ser')) {
    return message;
  }

  // Default: use the original message if it exists, otherwise default
  return message || defaultMessage;
};

// ========================================================================
// MAIN COMPONENT
// ========================================================================

/**
 * Panel de administraci√≥n de postulaciones
 * 
 * Componente que encapsula toda la funcionalidad de gesti√≥n de postulaciones
 * para propietarios/administradores de propiedades.
 * 
 * @param {PostulationAdminPanelProps} props - Props del componente
 * @returns {JSX.Element} Panel de administraci√≥n de postulaciones
 */
export const PostulationAdminPanel: React.FC<PostulationAdminPanelProps> = ({ 
  propertyId, 
  property 
}) => {
  // ========================================================================
  // STATE MANAGEMENT
  // ========================================================================

  const [postulations, setPostulations] = useState<Postulation[]>([]);
  const [loading, setLoading] = useState(true);
  const [isProfileModalOpen, setIsProfileModalOpen] = useState(false);
  const [selectedProfile, setSelectedProfile] = useState<Postulation | null>(null);
  const [isContractModalOpen, setIsContractModalOpen] = useState(false);
  const [isModifyAcceptanceModalOpen, setIsModifyAcceptanceModalOpen] = useState(false);
  const [isUndoingAcceptance, setIsUndoingAcceptance] = useState(false);
  const [hasSignedContract, setHasSignedContract] = useState<boolean>(false);
  const [checkingContract, setCheckingContract] = useState<boolean>(false);
  const [modificationData, setModificationData] = useState<AcceptanceModificationData>({
    comments: '',
    adjustedScore: undefined,
    additionalDocuments: '',
    specialConditions: '',
  });

  // ========================================================================
  // EFFECTS
  // ========================================================================

  useEffect(() => {
    if (propertyId) {
      fetchPostulations();
    }
  }, [propertyId]);

  // ========================================================================
  // DATA FETCHING
  // ========================================================================

  /**
   * Obtiene las postulaciones de la propiedad desde Supabase
   * Incluye informaci√≥n del postulante, aval y caracter√≠sticas
   */
  const fetchPostulations = async () => {
    console.log('üîç [PostulationAdminPanel] Cargando postulaciones para property:', propertyId);
    
    // Validaci√≥n: prevenir consultas con ID undefined/null
    if (!propertyId) {
      console.error('‚ùå [PostulationAdminPanel] Property ID es undefined/null, no se puede cargar postulaciones');
      toast.error('Error: ID de propiedad no v√°lido');
      setLoading(false);
      return;
    }

    try {
      const { data, error } = await supabase
        .from('applications')
        .select(`
          id,
          applicant_id,
          guarantor_id,
          status,
          created_at,
          message,
          application_characteristic_id,
          guarantor_characteristic_id,
          profiles!applicant_id (
            first_name,
            paternal_last_name,
            maternal_last_name,
            email,
            phone
          ),
          guarantors!guarantor_id (
            full_name,
            contact_email,
            contact_phone,
            rut
          )
        `)
        .eq('property_id', propertyId)
        .order('created_at', { ascending: false });

      if (error) {
        formatErrorDetails(error, 'fetchPostulations - Error cargando postulaciones');
        const userMessage = getUserFriendlyErrorMessage(error, 'Error al cargar las postulaciones');
        toast.error(userMessage);
        setLoading(false);
        return;
      }

      console.log('‚úÖ [PostulationAdminPanel] Postulaciones cargadas:', data?.length || 0);

      // Formatear las postulaciones al formato que usa el componente
      const formattedPostulations: Postulation[] = (data || []).map((app: any, index: number) => ({
        id: index + 1, // ID num√©rico para la tabla (display)
        applicationId: app.id, // ID REAL de la aplicaci√≥n (UUID)
        name: app.profiles
          ? `${app.profiles.first_name} ${app.profiles.paternal_last_name} ${app.profiles.maternal_last_name || ''}`.trim()
          : 'Sin nombre',
        date: new Date(app.created_at).toISOString().split('T')[0],
        score: 750, // TODO: Calcular score real si existe
        status: app.status === 'aprobada' ? 'Aprobado' : app.status === 'rechazada' ? 'Rechazado' : 'En Revisi√≥n',
        profile: {
          email: app.profiles?.email || 'Sin email',
          phone: app.profiles?.phone || 'Sin tel√©fono',
          income: 0, // TODO: Agregar si existe en la BD
          employment: 'N/A' // TODO: Agregar si existe en la BD
        },
        guarantor: app.guarantors ? {
          name: app.guarantors.full_name || 'Sin nombre',
          email: app.guarantors.contact_email || 'N/A',
          phone: app.guarantors.contact_phone || 'N/A',
          income: 0 // TODO: Agregar si existe en la BD
        } : null
      }));

      console.log('üìä [PostulationAdminPanel] Postulaciones formateadas:', formattedPostulations);
      setPostulations(formattedPostulations);
    } catch (error: any) {
      formatErrorDetails(error, 'fetchPostulations - Error en catch');
      const userMessage = getUserFriendlyErrorMessage(error, 'Error inesperado al cargar postulaciones');
      toast.error(userMessage);
    } finally {
      setLoading(false);
    }
  };

  // ========================================================================
  // HELPER FUNCTIONS
  // ========================================================================

  /**
   * Verifica si existe un contrato firmado para una aplicaci√≥n
   * @param {string} applicationId - ID de la aplicaci√≥n
   * @returns {Promise<boolean>} true si existe contrato firmado, false en caso contrario
   */
  const checkIfContractExists = async (applicationId: string): Promise<boolean> => {
    try {
      console.log('üîç [checkIfContractExists] Verificando contrato para aplicaci√≥n:', applicationId);

      const { data: contract, error } = await supabase
        .from('rental_contracts')
        .select('id, status')
        .eq('application_id', applicationId)
        .maybeSingle();

      if (error) {
        console.error('‚ùå Error verificando contrato existente:', error);
        return false; // En caso de error, asumimos que no hay contrato
      }

      if (!contract) {
        console.log('‚úÖ No existe contrato para esta aplicaci√≥n');
        return false;
      }

      // Consideramos contrato existente si est√° en estado 'fully_signed' o cualquier estado no 'draft'
      const hasSignedContract = contract.status !== 'draft';
      console.log(`‚úÖ Contrato encontrado con estado: ${contract.status} - Firmado: ${hasSignedContract}`);

      return hasSignedContract;
    } catch (error) {
      console.error('‚ùå Error en checkIfContractExists:', error);
      return false; // En caso de error, asumimos que no hay contrato
    }
  };

  /**
   * Obtiene el color del badge seg√∫n el score de riesgo
   * @param {number} score - Score de riesgo del postulante
   * @returns {string} Clases CSS para el color del badge
   */
  const getScoreColor = (score: number): string => {
    if (score > 750) return 'text-green-600 bg-green-50';
    if (score >= 650) return 'text-yellow-600 bg-yellow-50';
    return 'text-red-600 bg-red-50';
  };

  /**
   * Obtiene el estilo del badge seg√∫n el estado de la postulaci√≥n
   * @param {string} status - Estado de la postulaci√≥n
   * @returns {string} Clases CSS para el estilo del badge
   */
  const getStatusBadge = (status: string): string => {
    switch (status) {
      case 'Aprobado':
        return 'bg-green-100 text-green-800 border-green-200';
      case 'Rechazado':
        return 'bg-red-100 text-red-800 border-red-200';
      case 'En Revisi√≥n':
      default:
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
    }
  };

  // ========================================================================
  // EVENT HANDLERS
  // ========================================================================

  /**
   * Abre el modal de detalles de una postulaci√≥n
   * @param {Postulation} postulation - Postulaci√≥n seleccionada
   */
  const handleViewDetails = async (postulation: Postulation) => {
    console.log('üëÅÔ∏è [PostulationAdminPanel] Abriendo detalles de postulaci√≥n:', postulation.id);
    setSelectedProfile(postulation);

    // Verificar si existe contrato firmado para postulaciones aceptadas
    if (postulation.status === 'Aprobado') {
      setCheckingContract(true);
      try {
        const contractExists = await checkIfContractExists(postulation.applicationId);
        setHasSignedContract(contractExists);
      } catch (error) {
        console.error('Error verificando contrato:', error);
        setHasSignedContract(false); // En caso de error, asumimos que no hay contrato
      } finally {
        setCheckingContract(false);
      }
    } else {
      setHasSignedContract(false);
    }

    setIsProfileModalOpen(true);
  };

  /**
   * Maneja el click en "Aceptar Postulaci√≥n"
   * Cierra el modal de perfil y abre el modal de condiciones de contrato
   */
  const handleAcceptClick = () => {
    console.log('‚úÖ [PostulationAdminPanel] Iniciando proceso de aceptaci√≥n de postulaci√≥n');
    console.log('üë§ Perfil seleccionado:', selectedProfile);
    setIsProfileModalOpen(false);
    setIsContractModalOpen(true);
  };

  /**
   * Maneja el click en "Solicitar Informe Comercial"
   * TODO: Implementar integraci√≥n con servicio de informes comerciales
   */
  const handleRequestCommercialReport = () => {
    console.log('üìÑ [PostulationAdminPanel] Solicitando informe comercial');
    toast.success('Funcionalidad en desarrollo: Solicitar Informe Comercial');
  };

  /**
   * Maneja el click en "Solicitar Documentaci√≥n"
   * TODO: Implementar sistema de solicitud de documentos
   */
  const handleRequestDocumentation = () => {
    console.log('üìã [PostulationAdminPanel] Solicitando documentaci√≥n');
    toast.success('Funcionalidad en desarrollo: Solicitar Documentaci√≥n');
  };

  /**
   * Maneja el click en "Enviar Documentos"
   * TODO: Implementar sistema de env√≠o de documentos
   */
  const handleSendDocuments = () => {
    console.log('üì§ [PostulationAdminPanel] Enviando documentos');
    toast.success('Funcionalidad en desarrollo: Enviar Documentos');
  };

  /**
   * Callback ejecutado cuando el contrato se genera exitosamente
   */
  const handleContractSuccess = () => {
    console.log('‚úÖ [PostulationAdminPanel] Contrato generado con √©xito');
    setIsContractModalOpen(false);
    setSelectedProfile(null);
    // Recargar las postulaciones para reflejar cambios
    fetchPostulations();
  };

  // ========================================================================
  // POST-ACCEPTANCE MANAGEMENT HANDLERS
  // ========================================================================

  /**
   * Maneja el click en "Deshacer Aceptaci√≥n"
   * Revierte el estado de la postulaci√≥n de "Aprobado" a "En Revisi√≥n"
   */
  const handleUndoAcceptance = async () => {
    // Validar permisos b√°sicos
    if (!validateModificationPermissions(user, property, selectedProfile, 'deshacer aceptaciones')) {
      return;
    }

    // Verificar nuevamente si existe contrato firmado (por si cambi√≥ mientras estaba abierto el modal)
    if (!selectedProfile?.applicationId) {
      toast.error('Error: No se pudo identificar la postulaci√≥n seleccionada');
      return;
    }

    const contractExists = await checkIfContractExists(selectedProfile.applicationId);
    if (contractExists) {
      toast.error('No se puede deshacer la aceptaci√≥n porque ya existe un contrato firmado para esta postulaci√≥n.');
      return;
    }

    // Confirmaci√≥n del usuario con informaci√≥n detallada
    const confirmed = window.confirm(
      `¬øEst√°s seguro de que deseas deshacer la aceptaci√≥n de la postulaci√≥n de ${selectedProfile.name}?\n\n` +
      'Esta acci√≥n:\n' +
      '‚Ä¢ Revertir√° el estado de "Aprobado" a "En Revisi√≥n"\n' +
      '‚Ä¢ Permitir√° que otros postulantes sean considerados\n' +
      '‚Ä¢ Puede requerir regenerar contratos si ya se hab√≠an creado\n\n' +
      '¬øConfirmas que deseas continuar?'
    );

    if (!confirmed) return;

    console.log('üîÑ [PostulationAdminPanel] Deshaciendo aceptaci√≥n:', selectedProfile.applicationId);
    setIsUndoingAcceptance(true);

    try {
      // TEMPORAL: Usar actualizaci√≥n directa hasta que se despliegue la funci√≥n
      // TODO: Cambiar a usar supabase.functions.invoke('undo-application-approval') cuando est√© desplegada
      const { error } = await supabase
        .from('applications')
        .update({
          status: 'pendiente',
          updated_at: new Date().toISOString(),
        })
        .eq('id', selectedProfile.applicationId);

      if (error) {
        formatErrorDetails(error, 'handleUndoAcceptance - Error al actualizar estado');
        const userMessage = getUserFriendlyErrorMessage(error, 'Error al deshacer la aceptaci√≥n');
        toast.error(userMessage);
        return;
      }

      console.log('‚úÖ [PostulationAdminPanel] Aceptaci√≥n deshecha exitosamente');
      toast.success('Aceptaci√≥n deshecha correctamente. La postulaci√≥n vuelve a estar en revisi√≥n.');

      // Actualizar el perfil seleccionado localmente
      setSelectedProfile({
        ...selectedProfile,
        status: 'En Revisi√≥n'
      });

      // Resetear estado de contrato
      setHasSignedContract(false);

      // Recargar todas las postulaciones
      fetchPostulations();

      // TODO: Enviar notificaci√≥n al postulante sobre la reversi√≥n
      // TODO: Registrar en log de auditor√≠a

    } catch (error: any) {
      formatErrorDetails(error, 'handleUndoAcceptance - Error en catch');
      const userMessage = getUserFriendlyErrorMessage(error, 'Error inesperado al deshacer aceptaci√≥n');
      toast.error(userMessage);
    } finally {
      setIsUndoingAcceptance(false);
    }
  };

  /**
   * Maneja el click en "Modificar Aceptaci√≥n"
   * Abre el modal para editar datos asociados a la aceptaci√≥n
   */
  const handleModifyAcceptance = async () => {
    // Validar permisos b√°sicos
    if (!validateModificationPermissions(user, property, selectedProfile, 'modificar aceptaciones')) {
      return;
    }

    // Verificar que no existe contrato firmado
    if (!selectedProfile?.applicationId) {
      toast.error('Error: No se pudo identificar la postulaci√≥n seleccionada');
      return;
    }

    const contractExists = await checkIfContractExists(selectedProfile.applicationId);
    if (contractExists) {
      toast.error('No se puede modificar la aceptaci√≥n porque ya existe un contrato firmado para esta postulaci√≥n.');
      return;
    }

    console.log('‚úèÔ∏è [PostulationAdminPanel] Abriendo modal de modificaci√≥n de aceptaci√≥n');

    // TODO: Cargar datos existentes de modificaci√≥n desde la BD si existen

    setIsModifyAcceptanceModalOpen(true);
  };

  /**
   * Guarda las modificaciones de la aceptaci√≥n
   */
  const handleSaveModification = async () => {
    // Validar permisos b√°sicos
    if (!validateModificationPermissions(user, property, selectedProfile, 'guardar modificaciones')) {
      return;
    }

    console.log('üíæ [PostulationAdminPanel] Guardando modificaciones de aceptaci√≥n:', modificationData);

    // Validaciones de datos del formulario
    if (!modificationData.comments.trim()) {
      toast.error('Debes agregar al menos un comentario explicando las modificaciones');
      return;
    }

    if (modificationData.adjustedScore && (modificationData.adjustedScore < 300 || modificationData.adjustedScore > 850)) {
      toast.error('El score ajustado debe estar entre 300 y 850 puntos');
      return;
    }

    // Verificar nuevamente que no existe contrato firmado (por si cambi√≥ mientras editaba)
    if (!selectedProfile?.applicationId) {
      toast.error('Error: No se pudo identificar la postulaci√≥n seleccionada');
      return;
    }

    const contractExists = await checkIfContractExists(selectedProfile.applicationId);
    if (contractExists) {
      toast.error('No se pueden guardar las modificaciones porque ya existe un contrato firmado para esta postulaci√≥n.');
      // Cerrar modal y resetear
      setIsModifyAcceptanceModalOpen(false);
      setModificationData({
        comments: '',
        adjustedScore: undefined,
        additionalDocuments: '',
        specialConditions: '',
      });
      return;
    }

    try {
      // TODO: Crear tabla 'application_modifications' para almacenar historial de modificaciones
      // Por ahora, actualizamos la tabla applications con campos de modificaci√≥n
      
      const updateData: any = {
        // TODO: Agregar estos campos a la tabla applications en una migraci√≥n futura
        // modification_comments: modificationData.comments,
        // modification_date: new Date().toISOString(),
        // modified_by: user?.id, // Requerir user context
        updated_at: new Date().toISOString(),
      };

      if (modificationData.adjustedScore) {
        // updateData.adjusted_score = modificationData.adjustedScore;
      }

      const { error } = await supabase
        .from('applications')
        .update(updateData)
        .eq('id', selectedProfile.applicationId);

      if (error) {
        formatErrorDetails(error, 'handleSaveModification - Error al guardar modificaciones');
        const userMessage = getUserFriendlyErrorMessage(error, 'Error al guardar las modificaciones');
        toast.error(userMessage);
        return;
      }

      console.log('‚úÖ [PostulationAdminPanel] Modificaciones guardadas exitosamente');
      toast.success('Modificaciones guardadas correctamente');

      // Cerrar modal y limpiar datos
      setIsModifyAcceptanceModalOpen(false);
      setModificationData({
        comments: '',
        adjustedScore: undefined,
        additionalDocuments: '',
        specialConditions: '',
      });

      // Recargar postulaciones
      fetchPostulations();

      // TODO: Enviar notificaci√≥n al postulante si las modificaciones afectan t√©rminos
      // TODO: Registrar en log de auditor√≠a
      
    } catch (error: any) {
      formatErrorDetails(error, 'handleSaveModification - Error en catch');
      const userMessage = getUserFriendlyErrorMessage(error, 'Error inesperado al guardar modificaciones');
      toast.error(userMessage);
    }
  };

  /**
   * Cierra el modal de modificaci√≥n sin guardar
   */
  const handleCancelModification = () => {
    const hasChanges = modificationData.comments.trim() || 
                      modificationData.adjustedScore ||
                      modificationData.additionalDocuments?.trim() ||
                      modificationData.specialConditions?.trim();

    if (hasChanges) {
      const confirmed = window.confirm('¬øDeseas cerrar sin guardar los cambios?');
      if (!confirmed) return;
    }

    setIsModifyAcceptanceModalOpen(false);
    setModificationData({
      comments: '',
      adjustedScore: undefined,
      additionalDocuments: '',
      specialConditions: '',
    });
  };

  // ========================================================================
  // RENDER HELPERS
  // ========================================================================

  /**
   * Renderiza el estado de carga
   */
  if (loading) {
    return (
      <div className="bg-white rounded-xl shadow-sm border overflow-hidden">
        <div className="px-6 py-5 border-b border-gray-200">
          <h2 className="text-2xl font-bold text-gray-900">Gesti√≥n de Postulaciones</h2>
        </div>
        <div className="flex justify-center items-center py-12">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-700"></div>
        </div>
      </div>
    );
  }

  /**
   * Renderiza el mensaje cuando no hay postulaciones
   */
  if (postulations.length === 0) {
    return (
      <div className="bg-white rounded-xl shadow-sm border overflow-hidden">
        <div className="px-6 py-5 border-b border-gray-200">
          <h2 className="text-2xl font-bold text-gray-900">Gesti√≥n de Postulaciones</h2>
        </div>
        <div className="px-6 py-12 text-center">
          <div className="inline-flex items-center justify-center h-16 w-16 bg-gray-100 rounded-full mb-4">
            <FileText className="h-8 w-8 text-gray-400" />
          </div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">No hay postulaciones</h3>
          <p className="text-gray-500">
            A√∫n no hay postulantes para esta propiedad. Las postulaciones aparecer√°n aqu√≠ cuando los usuarios se postulen.
          </p>
        </div>
      </div>
    );
  }

  // ========================================================================
  // MAIN RENDER
  // ========================================================================

  return (
    <>
      {/* Secci√≥n de Gesti√≥n de Postulaciones */}
      <div className="bg-white rounded-xl shadow-sm border overflow-hidden">
        <div className="px-6 py-5 border-b border-gray-200">
          <h2 className="text-2xl font-bold text-gray-900">Gesti√≥n de Postulaciones</h2>
          <p className="text-sm text-gray-600 mt-1">
            Administra las solicitudes de arrendamiento para esta propiedad
          </p>
        </div>
        
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th scope="col" className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Nombre del Postulante
                </th>
                <th scope="col" className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Fecha de Postulaci√≥n
                </th>
                <th scope="col" className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Score de Riesgo
                </th>
                <th scope="col" className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Estado
                </th>
                <th scope="col" className="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Acciones
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {postulations.map((postulation) => (
                <tr key={postulation.id} className="hover:bg-gray-50 transition-colors duration-150">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      <div className="flex-shrink-0 h-10 w-10 bg-blue-100 rounded-full flex items-center justify-center">
                        <span className="text-blue-600 font-semibold text-sm">
                          {postulation.name.split(' ').map((n: string) => n[0]).join('').slice(0, 2).toUpperCase()}
                        </span>
                      </div>
                      <div className="ml-4">
                        <div className="text-sm font-medium text-gray-900">{postulation.name}</div>
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm text-gray-900">
                      {new Date(postulation.date).toLocaleDateString('es-CL', { 
                        year: 'numeric', 
                        month: 'long', 
                        day: 'numeric' 
                      })}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-semibold ${getScoreColor(postulation.score)}`}>
                      {postulation.score}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex px-3 py-1 text-xs font-semibold rounded-full border ${getStatusBadge(postulation.status)}`}>
                      {postulation.status}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <button
                      onClick={() => handleViewDetails(postulation)}
                      className="inline-flex items-center px-4 py-2 bg-gradient-to-r from-blue-600 to-blue-700 text-white font-semibold rounded-lg shadow-md hover:shadow-lg hover:from-blue-700 hover:to-blue-800 transition-all duration-200"
                      title="Administrar Postulaci√≥n"
                    >
                      <Settings className="h-4 w-4 mr-2" />
                      Administrar
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* Footer con resumen */}
        <div className="px-6 py-4 bg-gray-50 border-t border-gray-200">
          <div className="text-sm text-gray-700">
            Mostrando <span className="font-medium">{postulations.length}</span> postulaci√≥n{postulations.length !== 1 ? 'es' : ''}
          </div>
        </div>
      </div>

      {/* Modal de Detalles del Postulante - Dashboard de Decisi√≥n */}
      {isProfileModalOpen && selectedProfile && (
        <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-2xl shadow-2xl max-w-6xl w-full mx-4 max-h-[95vh] overflow-y-auto">
            {/* Header Visual */}
            <div className="relative bg-gradient-to-r from-indigo-600 via-blue-600 to-blue-700 px-8 py-10 rounded-t-2xl">
              <button
                onClick={() => setIsProfileModalOpen(false)}
                className="absolute top-6 right-6 text-white hover:text-gray-200 transition-colors bg-white/10 rounded-full p-2 hover:bg-white/20"
              >
                <X className="h-6 w-6" />
              </button>
              
              <div className="flex flex-col md:flex-row items-center md:items-start space-y-4 md:space-y-0 md:space-x-6">
                {/* Avatar Grande */}
                <div className="h-28 w-28 bg-white rounded-full flex items-center justify-center shadow-2xl border-4 border-white/30">
                  <span className="text-blue-600 font-bold text-4xl">
                    {selectedProfile.name.split(' ').map((n: string) => n[0]).join('').slice(0, 2).toUpperCase()}
                  </span>
                </div>
                
                {/* Informaci√≥n Principal */}
                <div className="flex-1 text-center md:text-left">
                  <h2 className="text-4xl font-bold text-white mb-3">{selectedProfile.name}</h2>
                  <div className="flex flex-wrap items-center justify-center md:justify-start gap-3">
                    <span className={`inline-flex px-4 py-2 text-sm font-bold rounded-full border-2 shadow-lg ${getStatusBadge(selectedProfile.status)}`}>
                      {selectedProfile.status}
                    </span>
                    <span className={`inline-flex items-center px-4 py-2 rounded-full text-sm font-bold shadow-lg border-2 border-white/30 ${getScoreColor(selectedProfile.score)}`}>
                      üìä Score: {selectedProfile.score}
                    </span>
                  </div>
                  <p className="text-blue-100 mt-3 text-sm">
                    Postulaci√≥n recibida el {new Date(selectedProfile.date).toLocaleDateString('es-CL', { 
                      year: 'numeric', 
                      month: 'long', 
                      day: 'numeric' 
                    })}
                  </p>
                </div>
              </div>
            </div>

            {/* Contenido del Dashboard */}
            <div className="p-8">
              
              {/* Grid de Informaci√≥n */}
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
                
                {/* Secci√≥n del Postulante */}
                <div className="bg-gradient-to-br from-blue-50 to-indigo-50 rounded-xl p-6 shadow-md border border-blue-100">
                  <div className="flex items-center mb-6 pb-4 border-b border-blue-200">
                    <div className="h-12 w-12 bg-blue-600 rounded-xl flex items-center justify-center shadow-md">
                      <span className="text-white text-2xl">üë§</span>
                    </div>
                    <h3 className="text-2xl font-bold text-gray-900 ml-4">Perfil del Postulante</h3>
                  </div>
                  
                  <div className="space-y-3">
                    <div className="bg-white rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow border border-gray-100">
                      <div className="flex items-center space-x-3">
                        <Mail className="h-5 w-5 text-blue-600" />
                        <div className="flex-1">
                          <label className="text-xs font-semibold text-gray-500 uppercase tracking-wider block">Email</label>
                          <p className="text-base text-gray-900 mt-1">{selectedProfile.profile.email}</p>
                        </div>
                      </div>
                    </div>
                    
                    <div className="bg-white rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow border border-gray-100">
                      <div className="flex items-center space-x-3">
                        <Phone className="h-5 w-5 text-green-600" />
                        <div className="flex-1">
                          <label className="text-xs font-semibold text-gray-500 uppercase tracking-wider block">Tel√©fono</label>
                          <p className="text-base text-gray-900 mt-1">{selectedProfile.profile.phone}</p>
                        </div>
                      </div>
                    </div>
                    
                    <div className="bg-white rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow border border-gray-100">
                      <div className="flex items-center space-x-3">
                        <DollarSign className="h-5 w-5 text-emerald-600" />
                        <div className="flex-1">
                          <label className="text-xs font-semibold text-gray-500 uppercase tracking-wider block">Renta Mensual</label>
                          <p className="text-lg font-bold text-emerald-600 mt-1">
                            {new Intl.NumberFormat('es-CL', {
                              style: 'currency',
                              currency: 'CLP'
                            }).format(selectedProfile.profile.income)}
                          </p>
                        </div>
                      </div>
                    </div>
                    
                    <div className="bg-white rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow border border-gray-100">
                      <div className="flex items-center space-x-3">
                        <Briefcase className="h-5 w-5 text-purple-600" />
                        <div className="flex-1">
                          <label className="text-xs font-semibold text-gray-500 uppercase tracking-wider block">Situaci√≥n Laboral</label>
                          <p className="text-base text-gray-900 mt-1">{selectedProfile.profile.employment}</p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Secci√≥n del Aval */}
                <div className="bg-gradient-to-br from-green-50 to-emerald-50 rounded-xl p-6 shadow-md border border-green-100">
                  <div className="flex items-center mb-6 pb-4 border-b border-green-200">
                    <div className="h-12 w-12 bg-green-600 rounded-xl flex items-center justify-center shadow-md">
                      <span className="text-white text-2xl">üõ°Ô∏è</span>
                    </div>
                    <h3 className="text-2xl font-bold text-gray-900 ml-4">Datos del Aval</h3>
                  </div>
                  
                  <div className="space-y-3">
                    {selectedProfile.guarantor ? (
                      <>
                        <div className="bg-white rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow border border-gray-100">
                          <div className="flex items-center space-x-3">
                            <UserCheck className="h-5 w-5 text-green-600" />
                            <div className="flex-1">
                              <label className="text-xs font-semibold text-gray-500 uppercase tracking-wider block">Nombre del Aval</label>
                              <p className="text-base font-semibold text-gray-900 mt-1">{selectedProfile.guarantor.name}</p>
                            </div>
                          </div>
                        </div>

                        <div className="bg-white rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow border border-gray-100">
                          <div className="flex items-center space-x-3">
                            <Mail className="h-5 w-5 text-blue-600" />
                            <div className="flex-1">
                              <label className="text-xs font-semibold text-gray-500 uppercase tracking-wider block">Email</label>
                              <p className="text-base text-gray-900 mt-1">{selectedProfile.guarantor.email}</p>
                            </div>
                          </div>
                        </div>

                        <div className="bg-white rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow border border-gray-100">
                          <div className="flex items-center space-x-3">
                            <DollarSign className="h-5 w-5 text-emerald-600" />
                            <div className="flex-1">
                              <label className="text-xs font-semibold text-gray-500 uppercase tracking-wider block">Renta Mensual</label>
                              <p className="text-lg font-bold text-emerald-600 mt-1">
                                {new Intl.NumberFormat('es-CL', {
                                  style: 'currency',
                                  currency: 'CLP'
                                }).format(selectedProfile.guarantor.income)}
                              </p>
                            </div>
                          </div>
                        </div>
                      </>
                    ) : (
                      <div className="bg-gray-50 rounded-lg p-4 border border-gray-200">
                        <div className="flex items-center space-x-3">
                          <AlertTriangle className="h-5 w-5 text-gray-400" />
                          <div className="flex-1">
                            <p className="text-sm text-gray-600">Esta postulaci√≥n no tiene aval registrado</p>
                          </div>
                        </div>
                      </div>
                    )}

                    {/* Tarjeta Destacada de Capacidad de Pago Total */}
                    <div className="bg-gradient-to-br from-indigo-600 via-blue-600 to-blue-700 rounded-xl p-6 shadow-xl mt-6 border-4 border-blue-300 transform hover:scale-105 transition-transform">
                      <div className="text-center">
                        <div className="inline-flex items-center justify-center h-14 w-14 bg-white rounded-full mb-3 shadow-lg">
                          <DollarSign className="h-8 w-8 text-blue-600" />
                        </div>
                        <h4 className="text-sm font-bold text-blue-100 uppercase tracking-wider mb-2">üí∞ Capacidad de Pago Total</h4>
                        <p className="text-4xl font-black text-white mb-2">
                          {new Intl.NumberFormat('es-CL', {
                            style: 'currency',
                            currency: 'CLP'
                          }).format(selectedProfile.profile.income + (selectedProfile.guarantor?.income || 0))}
                        </p>
                        <p className="text-sm text-blue-100 font-medium">
                          {selectedProfile.guarantor ? 'Postulante + Aval Combinados' : 'Solo Postulante'}
                        </p>
                      </div>
                    </div>
                  </div>
                </div>

              </div>

              {/* Panel de Acciones del Administrador */}
              <div className="bg-gradient-to-r from-gray-50 to-gray-100 rounded-xl p-6 shadow-md border-2 border-gray-200">
                <div className="flex items-center mb-6 pb-4 border-b-2 border-gray-300">
                  <div className="h-12 w-12 bg-gradient-to-r from-purple-600 to-indigo-600 rounded-xl flex items-center justify-center shadow-md">
                    <span className="text-white text-2xl">‚ö°</span>
                  </div>
                  <h3 className="text-2xl font-bold text-gray-900 ml-4">Acciones del Administrador</h3>
                </div>

                <div className="grid grid-cols-2 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                  {/* Bot√≥n: Solicitar Informe Comercial */}
                  <button 
                    onClick={handleRequestCommercialReport}
                    className="group relative bg-gradient-to-r from-purple-600 to-purple-700 text-white font-bold py-4 px-6 rounded-xl shadow-lg hover:shadow-xl hover:from-purple-700 hover:to-purple-800 transition-all duration-200 transform hover:-translate-y-1"
                  >
                    <div className="flex flex-col items-center space-y-2">
                      <FileText className="h-8 w-8" />
                      <span className="text-sm">Solicitar Informe</span>
                      <span className="text-xs opacity-90">Comercial</span>
                    </div>
                  </button>

                  {/* Bot√≥n: Solicitar Documentaci√≥n */}
                  <button 
                    onClick={handleRequestDocumentation}
                    className="group relative bg-gradient-to-r from-cyan-600 to-cyan-700 text-white font-bold py-4 px-6 rounded-xl shadow-lg hover:shadow-xl hover:from-cyan-700 hover:to-cyan-800 transition-all duration-200 transform hover:-translate-y-1"
                  >
                    <div className="flex flex-col items-center space-y-2">
                      <Copy className="h-8 w-8" />
                      <span className="text-sm">Solicitar Documentaci√≥n</span>
                      <span className="text-xs opacity-90">Respaldo</span>
                    </div>
                  </button>

                  {/* Bot√≥n: Enviar Documentos */}
                  <button 
                    onClick={handleSendDocuments}
                    className="group relative bg-gradient-to-r from-blue-600 to-blue-700 text-white font-bold py-4 px-6 rounded-xl shadow-lg hover:shadow-xl hover:from-blue-700 hover:to-blue-800 transition-all duration-200 transform hover:-translate-y-1"
                  >
                    <div className="flex flex-col items-center space-y-2">
                      <Mail className="h-8 w-8" />
                      <span className="text-sm">Enviar Documentos</span>
                      <span className="text-xs opacity-90">Contrato/Otros</span>
                    </div>
                  </button>

                  {/* Bot√≥n: Aceptar Postulaci√≥n */}
                  <button
                    onClick={handleAcceptClick}
                    className="group relative bg-gradient-to-r from-green-600 to-green-700 text-white font-bold py-4 px-6 rounded-xl shadow-lg hover:shadow-xl hover:from-green-700 hover:to-green-800 transition-all duration-200 transform hover:-translate-y-1"
                  >
                    <div className="flex flex-col items-center space-y-2">
                      <CheckCircle className="h-8 w-8" />
                      <span className="text-sm">Aceptar Postulaci√≥n</span>
                      <span className="text-xs opacity-90">Generar Contrato</span>
                    </div>
                  </button>
                </div>

                <p className="text-xs text-gray-600 text-center mt-4 italic">
                  üí° Selecciona una acci√≥n para procesar esta postulaci√≥n
                </p>
              </div>

              {/* ========================================================================
                  SECCI√ìN: ADMINISTRAR ACEPTACI√ìN

                  Esta secci√≥n se muestra cuando la postulaci√≥n ha sido aceptada (status: 'Aprobado')
                  Y NO EXISTE UN CONTRATO FIRMADO

                  FUNCIONALIDADES:
                  - Deshacer Aceptaci√≥n: Revierte el estado a "En Revisi√≥n"
                  - Modificar Aceptaci√≥n: Permite editar datos asociados a la decisi√≥n

                  CONDICIONES PARA MOSTRAR:
                  - Estado de la postulaci√≥n: 'Aprobado'
                  - NO existe contrato firmado (status !== 'draft' en rental_contracts)

                  TODO: Agregar botones futuros:
                  - [ ] "Ver Contrato Generado" - Link directo al contrato PDF
                  - [ ] "Reenviar Contrato" - Reenv√≠a el contrato al postulante
                  - [ ] "Agregar Anexo" - Permite agregar anexos al contrato
                  - [ ] "Actualizar T√©rminos" - Modifica t√©rminos espec√≠ficos del contrato
                  - [ ] "Solicitar Firma Digital" - Integraci√≥n con firma electr√≥nica
                  - [ ] "Programar Entrega de Llaves" - Calendario de entrega
                  - [ ] "Generar Checklist de Ingreso" - Lista de verificaci√≥n
                  - [ ] "Registrar Pago de Garant√≠a" - Control de dep√≥sitos
                  - [ ] "Enviar Bienvenida" - Email de bienvenida al nuevo arrendatario
                  - [ ] "Marcar como Contrato Firmado" - Actualiza estado final

                  PERMISOS FUTUROS:
                  - Solo propietarios y administradores autorizados
                  - Log de auditor√≠a de todas las acciones
                  - Notificaciones autom√°ticas de cambios
                  ======================================================================== */}
              {selectedProfile.status === 'Aprobado' && !hasSignedContract && (
                <div className="mt-6 bg-gradient-to-r from-emerald-50 via-green-50 to-teal-50 rounded-xl p-6 shadow-lg border-2 border-green-300">
                  <div className="flex items-center mb-6 pb-4 border-b-2 border-green-400">
                    <div className="h-12 w-12 bg-gradient-to-r from-green-600 to-emerald-600 rounded-xl flex items-center justify-center shadow-md">
                      {checkingContract ? (
                        <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-white"></div>
                      ) : (
                        <Shield className="h-6 w-6 text-white" />
                      )}
                    </div>
                    <div className="flex-1 ml-4">
                      <h3 className="text-2xl font-bold text-gray-900">ADMINISTRAR ACEPTACI√ìN</h3>
                      <p className="text-sm text-gray-600 mt-1">
                        {checkingContract
                          ? 'Verificando estado del contrato...'
                          : 'Gestiona la postulaci√≥n aceptada: reversa la decisi√≥n o modifica los t√©rminos'
                        }
                      </p>
                    </div>
                    <div className="hidden sm:block">
                      <span className="inline-flex items-center px-4 py-2 bg-green-600 text-white text-sm font-bold rounded-full shadow-md">
                        ‚úì ACEPTADA
                      </span>
                    </div>
                  </div>

                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    {/* Bot√≥n: Deshacer Aceptaci√≥n */}
                    <button
                      onClick={handleUndoAcceptance}
                      disabled={isUndoingAcceptance || checkingContract}
                      className="group relative bg-gradient-to-r from-orange-600 to-red-600 text-white font-bold py-6 px-6 rounded-xl shadow-lg hover:shadow-xl hover:from-orange-700 hover:to-red-700 transition-all duration-200 transform hover:-translate-y-1 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
                    >
                      <div className="flex flex-col items-center space-y-3">
                        {isUndoingAcceptance ? (
                          <>
                            <div className="animate-spin rounded-full h-10 w-10 border-b-2 border-white"></div>
                            <span className="text-base">Procesando...</span>
                          </>
                        ) : (
                          <>
                            <RotateCcw className="h-10 w-10" />
                            <div className="text-center">
                              <span className="text-base block">Deshacer Aceptaci√≥n</span>
                              <span className="text-xs opacity-90 block mt-1">Revierte a "En Revisi√≥n"</span>
                            </div>
                          </>
                        )}
                      </div>
                    </button>

                    {/* Bot√≥n: Modificar Aceptaci√≥n */}
                    <button
                      onClick={handleModifyAcceptance}
                      disabled={checkingContract}
                      className="group relative bg-gradient-to-r from-blue-600 to-indigo-600 text-white font-bold py-6 px-6 rounded-xl shadow-lg hover:shadow-xl hover:from-blue-700 hover:to-indigo-700 transition-all duration-200 transform hover:-translate-y-1 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
                    >
                      <div className="flex flex-col items-center space-y-3">
                        <Edit className="h-10 w-10" />
                        <div className="text-center">
                          <span className="text-base block">Modificar Aceptaci√≥n</span>
                          <span className="text-xs opacity-90 block mt-1">Editar t√©rminos y comentarios</span>
                        </div>
                      </div>
                    </button>
                  </div>

                  {/* Informaci√≥n adicional */}
                  <div className="mt-4 p-4 bg-white rounded-lg border border-green-200">
                    <p className="text-xs text-gray-700">
                      <strong>‚ÑπÔ∏è Importante:</strong> Estas acciones solo est√°n disponibles mientras no exista un contrato firmado.
                      Una vez firmado el contrato, los cambios deben hacerse directamente en el documento legal.
                    </p>
                  </div>

                  {/* TODO: Agregar m√°s acciones post-aceptaci√≥n aqu√≠
                      - Ver/Descargar contrato generado
                      - Reenviar contrato al postulante
                      - Agregar anexos o documentos adicionales
                      - Programar entrega de llaves
                      - Generar checklist de ingreso
                  */}
                </div>

                {/* ========================================================================
                    SECCI√ìN: CONTRATO FIRMADO - ACCIONES RESTRINGIDAS

                    Esta secci√≥n se muestra cuando la postulaci√≥n ha sido aceptada
                    PERO YA EXISTE UN CONTRATO FIRMADO

                    FUNCIONALIDADES FUTURAS:
                    - Ver contrato firmado
                    - Descargar contrato PDF
                    - Ver historial de firmas
                    - Contactar soporte legal para modificaciones
                    ======================================================================== */}
                {selectedProfile.status === 'Aprobado' && hasSignedContract && !checkingContract && (
                  <div className="mt-6 bg-gradient-to-r from-amber-50 via-orange-50 to-yellow-50 rounded-xl p-6 shadow-lg border-2 border-amber-300">
                    <div className="flex items-center mb-6 pb-4 border-b-2 border-amber-400">
                      <div className="h-12 w-12 bg-gradient-to-r from-amber-600 to-orange-600 rounded-xl flex items-center justify-center shadow-md">
                        <FileText className="h-6 w-6 text-white" />
                      </div>
                      <div className="flex-1 ml-4">
                        <h3 className="text-2xl font-bold text-gray-900">CONTRATO FIRMADO</h3>
                        <p className="text-sm text-gray-600 mt-1">
                          Esta postulaci√≥n tiene un contrato legalmente vinculante
                        </p>
                      </div>
                      <div className="hidden sm:block">
                        <span className="inline-flex items-center px-4 py-2 bg-amber-600 text-white text-sm font-bold rounded-full shadow-md">
                          üìÑ FIRMADO
                        </span>
                      </div>
                    </div>

                    <div className="bg-white rounded-lg p-4 border border-amber-200">
                      <div className="flex items-start space-x-3">
                        <AlertTriangle className="h-5 w-5 text-amber-600 mt-0.5 flex-shrink-0" />
                        <div>
                          <h4 className="text-sm font-bold text-gray-900 mb-2">Modificaciones Restringidas</h4>
                          <p className="text-sm text-gray-700 mb-3">
                            Esta postulaci√≥n tiene un contrato firmado que la hace legalmente vinculante.
                            Las modificaciones ya no pueden hacerse desde esta interfaz para proteger la integridad legal del contrato.
                          </p>
                          <div className="bg-amber-50 p-3 rounded-lg border border-amber-200">
                            <p className="text-xs text-amber-800">
                              <strong>Para realizar cambios:</strong> Contacte al departamento legal o utilice el sistema de anexos contractuales.
                              Cualquier modificaci√≥n debe ser acordada por ambas partes y documentada apropiadamente.
                            </p>
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* TODO: Agregar acciones disponibles para contratos firmados
                        - Ver contrato PDF
                        - Descargar contrato
                        - Ver historial de firmas
                        - Solicitar modificaci√≥n legal
                        - Agregar anexos
                    */}
                  </div>
                )}
                </div>
              )}

              {/* Footer */}
              <div className="flex justify-center items-center mt-8 pt-6 border-t-2 border-gray-200">
                <button
                  onClick={() => setIsProfileModalOpen(false)}
                  className="px-8 py-3 bg-gray-600 text-white font-semibold rounded-lg hover:bg-gray-700 transition-colors duration-200 shadow-md hover:shadow-lg"
                >
                  Cerrar
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Modal de Condiciones de Contrato */}
      {isContractModalOpen && selectedProfile && property && (
        <RentalContractConditionsForm
          property={property}
          selectedProfile={selectedProfile}
          onSuccess={handleContractSuccess}
          onClose={() => setIsContractModalOpen(false)}
        />
      )}

      {/* ========================================================================
          MODAL: MODIFICAR ACEPTACI√ìN
          
          Modal para editar datos asociados a una postulaci√≥n aceptada
          
          CAMPOS EDITABLES:
          - Comentarios (obligatorio)
          - Score Ajustado (opcional)
          - Documentos Adicionales (opcional)
          - Condiciones Especiales (opcional)
          
          TODO: Campos futuros a agregar:
          - [ ] Fecha de inicio ajustada
          - [ ] Monto de arriendo modificado
          - [ ] Descuentos o bonificaciones
          - [ ] Requerimientos especiales de mantenimiento
          - [ ] Notas sobre mascotas o restricciones
          - [ ] Ajustes de dep√≥sito de garant√≠a
          ======================================================================== */}
      {isModifyAcceptanceModalOpen && selectedProfile && (
        <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-2xl shadow-2xl max-w-3xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            {/* Header del Modal */}
            <div className="relative bg-gradient-to-r from-blue-600 via-indigo-600 to-purple-600 px-8 py-8 rounded-t-2xl">
              <button
                onClick={handleCancelModification}
                className="absolute top-6 right-6 text-white hover:text-gray-200 transition-colors bg-white/10 rounded-full p-2 hover:bg-white/20"
              >
                <X className="h-6 w-6" />
              </button>
              
              <div className="flex items-center space-x-4">
                <div className="h-16 w-16 bg-white rounded-full flex items-center justify-center shadow-lg">
                  <Edit className="h-8 w-8 text-blue-600" />
                </div>
                <div>
                  <h2 className="text-3xl font-bold text-white mb-1">Modificar Aceptaci√≥n</h2>
                  <p className="text-blue-100 text-sm">
                    Edita los t√©rminos y condiciones de la postulaci√≥n aceptada de <strong>{selectedProfile.name}</strong>
                  </p>
                </div>
              </div>
            </div>

            {/* Contenido del Modal */}
            <div className="p-8 space-y-6">
              
              {/* Comentarios (Obligatorio) */}
              <div>
                <label htmlFor="comments" className="block text-sm font-bold text-gray-700 mb-2">
                  Comentarios de Modificaci√≥n <span className="text-red-500">*</span>
                </label>
                <textarea
                  id="comments"
                  value={modificationData.comments}
                  onChange={(e) => setModificationData({ ...modificationData, comments: e.target.value })}
                  placeholder="Describe los cambios realizados y la raz√≥n de la modificaci√≥n..."
                  className="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                  rows={4}
                  required
                />
                <p className="text-xs text-gray-500 mt-1">
                  Este comentario se registrar√° en el historial de la postulaci√≥n
                </p>
              </div>

              {/* Score Ajustado (Opcional) */}
              <div>
                <label htmlFor="adjustedScore" className="block text-sm font-bold text-gray-700 mb-2">
                  Score de Riesgo Ajustado (Opcional)
                </label>
                <input
                  type="number"
                  id="adjustedScore"
                  value={modificationData.adjustedScore || ''}
                  onChange={(e) => setModificationData({ 
                    ...modificationData, 
                    adjustedScore: e.target.value ? parseInt(e.target.value) : undefined 
                  })}
                  placeholder="Ej: 750"
                  min="300"
                  max="850"
                  className="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                />
                <p className="text-xs text-gray-500 mt-1">
                  Rango v√°lido: 300-850. Deja vac√≠o para mantener el score actual ({selectedProfile.score})
                </p>
              </div>

              {/* Documentos Adicionales (Opcional) */}
              <div>
                <label htmlFor="additionalDocuments" className="block text-sm font-bold text-gray-700 mb-2">
                  Documentos Adicionales Solicitados (Opcional)
                </label>
                <textarea
                  id="additionalDocuments"
                  value={modificationData.additionalDocuments}
                  onChange={(e) => setModificationData({ ...modificationData, additionalDocuments: e.target.value })}
                  placeholder="Lista de documentos extra requeridos..."
                  className="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                  rows={3}
                />
                <p className="text-xs text-gray-500 mt-1">
                  Ej: Certificado de trabajo actualizado, comprobante de domicilio, etc.
                </p>
              </div>

              {/* Condiciones Especiales (Opcional) */}
              <div>
                <label htmlFor="specialConditions" className="block text-sm font-bold text-gray-700 mb-2">
                  Condiciones Especiales (Opcional)
                </label>
                <textarea
                  id="specialConditions"
                  value={modificationData.specialConditions}
                  onChange={(e) => setModificationData({ ...modificationData, specialConditions: e.target.value })}
                  placeholder="Condiciones adicionales o ajustes al contrato..."
                  className="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                  rows={3}
                />
                <p className="text-xs text-gray-500 mt-1">
                  Ej: Descuento especial, fecha de ingreso flexible, permite mascotas, etc.
                </p>
              </div>

              {/* Nota Informativa */}
              <div className="bg-blue-50 border-l-4 border-blue-500 p-4 rounded-r-lg">
                <div className="flex items-start">
                  <AlertTriangle className="h-5 w-5 text-blue-600 mt-0.5 mr-3 flex-shrink-0" />
                  <div>
                    <h4 className="text-sm font-bold text-blue-900 mb-1">Nota Importante</h4>
                    <p className="text-xs text-blue-800">
                      Estos cambios quedar√°n registrados en el historial de modificaciones. 
                      El postulante NO ser√° notificado autom√°ticamente de estos ajustes.
                    </p>
                  </div>
                </div>
              </div>

            </div>

            {/* Footer con Botones de Acci√≥n */}
            <div className="bg-gray-50 px-8 py-6 rounded-b-2xl flex flex-col sm:flex-row justify-end gap-3 border-t">
              <button
                onClick={handleCancelModification}
                className="px-6 py-3 bg-gray-600 text-white font-semibold rounded-lg hover:bg-gray-700 transition-colors duration-200 shadow-md hover:shadow-lg"
              >
                Cancelar
              </button>
              <button
                onClick={handleSaveModification}
                className="px-6 py-3 bg-gradient-to-r from-blue-600 to-indigo-600 text-white font-semibold rounded-lg hover:from-blue-700 hover:to-indigo-700 transition-all duration-200 shadow-md hover:shadow-lg"
              >
                <div className="flex items-center space-x-2">
                  <CheckCircle className="h-5 w-5" />
                  <span>Guardar Modificaciones</span>
                </div>
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

