// ============================================================================
// DIAGN√ìSTICO ESPEC√çFICO: Contrato 30c300dc-f66e-482e-857b-39628e936e89
// ============================================================================
// Script para diagnosticar espec√≠ficamente el contrato que no se puede editar
//
// Instrucciones:
// 1. Ve a: http://localhost:5173/contract/30c300dc-f66e-482e-857b-39628e936e89
// 2. Abre la consola del navegador (F12)
// 3. Copia y pega TODO este c√≥digo
// 4. Presiona Enter
// ============================================================================

(async () => {
  console.log('üîç === DIAGN√ìSTICO CONTRATO ESPEC√çFICO ===');
  console.log('üìÑ Contrato ID: 30c300dc-f66e-482e-857b-39628e936e89');

  try {
    // Importar Supabase
    let supabase;
    try {
      supabase = window.supabase || (await import('./src/lib/supabase.js')).supabase;
    } catch (e) {
      console.error('‚ùå No se pudo acceder a Supabase. Aseg√∫rate de estar en la aplicaci√≥n.');
      return;
    }

    // 1. VERIFICAR AUTENTICACI√ìN
    console.log('üîê === VERIFICANDO AUTENTICACI√ìN ===');
    const { data: session, error: sessionError } = await supabase.auth.getSession();

    if (sessionError) {
      console.error('‚ùå Error obteniendo sesi√≥n:', sessionError);
      return;
    }

    if (!session?.user) {
      console.error('‚ùå No hay usuario autenticado. Debes iniciar sesi√≥n para ver contratos.');
      console.log('üí° SOLUCI√ìN: Inicia sesi√≥n en la aplicaci√≥n primero');
      return;
    }

    console.log('‚úÖ Usuario autenticado:', session.user.id);

    // 2. INTENTAR CARGAR EL CONTRATO ESPEC√çFICO
    console.log('üìÑ === INTENTANDO CARGAR CONTRATO ===');
    const contractId = '30c300dc-f66e-482e-857b-39628e936e89';

    const { data: contractData, error: contractError } = await supabase
      .from('rental_contracts')
      .select(`
        id,
        contract_content,
        contract_html,
        contract_format,
        contract_number,
        status,
        applications (
          id,
          applicant_id,
          property_id,
          snapshot_applicant_first_name,
          snapshot_applicant_paternal_last_name,
          properties (
            owner_id,
            description,
            address_street,
            address_number,
            address_department,
            address_commune,
            address_region
          )
        )
      `)
      .eq('id', contractId)
      .single();

    if (contractError) {
      console.error('‚ùå Error cargando contrato:', contractError.message);
      console.error('C√≥digo de error:', contractError.code);

      if (contractError.message.includes('permission denied') || contractError.message.includes('RLS')) {
        console.log('üö´ PROBLEMA: No tienes permisos para ver este contrato');
        console.log('üí° POSIBLES CAUSAS:');
        console.log('   - No eres el propietario de la propiedad');
        console.log('   - No eres el aplicante de la solicitud');
        console.log('   - Las pol√≠ticas RLS est√°n bloqueando el acceso');
        console.log('üí° SOLUCI√ìN: SOLUCION_RAPIDA_EDICION_CONTRATOS.sql');
      } else if (contractError.code === 'PGRST116') {
        console.log('üö´ PROBLEMA: El contrato no existe');
        console.log('üí° VERIFICA: El ID del contrato es correcto');
      }

      return;
    }

    if (!contractData) {
      console.error('‚ùå Contrato no encontrado');
      return;
    }

    console.log('‚úÖ Contrato cargado exitosamente');
    console.log('üìã Detalles del contrato:');
    console.log('   - ID:', contractData.id);
    console.log('   - Estado:', contractData.status);
    console.log('   - Formato:', contractData.contract_format || 'No especificado');
    console.log('   - N√∫mero:', contractData.contract_number || 'Sin n√∫mero');
    console.log('   - Tiene contract_html:', !!contractData.contract_html);
    console.log('   - Tiene contract_content:', !!contractData.contract_content);

    // 3. VERIFICAR PERMISOS PARA EDITAR
    console.log('üîí === VERIFICANDO PERMISOS DE EDICI√ìN ===');

    const applicantId = contractData.applications?.applicant_id;
    const ownerId = contractData.applications?.properties?.owner_id;

    console.log('üë§ Aplicante ID:', applicantId);
    console.log('üè† Propietario ID:', ownerId);
    console.log('üîë Tu usuario ID:', session.user.id);

    const canEditAsApplicant = applicantId === session.user.id;
    const canEditAsOwner = ownerId === session.user.id;
    const canEdit = canEditAsApplicant || canEditAsOwner;

    console.log('‚úÖ Puedes editar como aplicante:', canEditAsApplicant);
    console.log('‚úÖ Puedes editar como propietario:', canEditAsOwner);
    console.log('üéØ PERMISO TOTAL DE EDICI√ìN:', canEdit ? '‚úÖ S√ç' : '‚ùå NO');

    if (!canEdit) {
      console.log('üö´ POR QU√â NO PUEDES EDITAR:');
      if (!canEditAsApplicant && !canEditAsOwner) {
        console.log('   - No eres ni el aplicante ni el propietario');
      } else {
        console.log('   - Error inesperado en la l√≥gica de permisos');
      }
      console.log('üí° SOLUCI√ìN: Solo puedes editar contratos donde seas el propietario o aplicante');
      return;
    }

    // 4. PROBAR EDICI√ìN REAL
    console.log('‚úèÔ∏è === PROBANDO EDICI√ìN REAL ===');

    // Determinar qu√© columna actualizar
    const hasHtml = contractData.contract_html && contractData.contract_html.length > 0;
    const hasContent = contractData.contract_content && Object.keys(contractData.contract_content).length > 0;

    let updateData = { updated_at: new Date().toISOString() };
    let columnToUpdate = '';

    if (hasHtml) {
      console.log('üìù Actualizando contract_html');
      columnToUpdate = 'contract_html';
      updateData.contract_html = contractData.contract_html + '\n\n<!-- EDITADO DESDE DIAGN√ìSTICO - ' + new Date().toISOString() + ' -->';
    } else if (hasContent) {
      console.log('üìù Actualizando contract_content');
      columnToUpdate = 'contract_content';
      updateData.contract_content = {
        ...contractData.contract_content,
        diagnostico_test: `Editado desde diagn√≥stico ${new Date().toISOString()}`
      };
    } else {
      console.log('üìù Contrato sin contenido - agregando contract_html b√°sico');
      columnToUpdate = 'contract_html';
      updateData.contract_html = `<p>Contrato editado desde diagn√≥stico - ${new Date().toISOString()}</p>`;
    }

    const { error: updateError } = await supabase
      .from('rental_contracts')
      .update(updateData)
      .eq('id', contractId);

    if (updateError) {
      console.error('‚ùå Error en edici√≥n:', updateError.message);
      console.error('C√≥digo:', updateError.code);

      if (updateError.message.includes('permission denied') || updateError.message.includes('RLS')) {
        console.log('üö´ PROBLEMA: Pol√≠ticas RLS bloqueando la edici√≥n');
        console.log('üí° SOLUCI√ìN: Ejecuta SOLUCION_RAPIDA_EDICION_CONTRATOS.sql');
      }
    } else {
      console.log('‚úÖ ¬°EDICI√ìN EXITOSA!');
      console.log('üìù Columna actualizada:', columnToUpdate);
      console.log('üéâ El contrato se puede editar correctamente');
      console.log('üí° El bot√≥n "Editar" deber√≠a aparecer en la interfaz');
    }

    // 5. VERIFICAR POL√çTICAS RLS
    console.log('üîí === VERIFICANDO POL√çTICAS RLS ===');
    try {
      const { data: policies, error: policiesError } = await supabase
        .from('pg_policies')
        .select('policyname, cmd')
        .eq('tablename', 'rental_contracts')
        .eq('cmd', 'UPDATE');

      if (policiesError) {
        console.log('‚ö†Ô∏è No se pudo verificar pol√≠ticas desde el navegador');
      } else {
        console.log('üìã Pol√≠ticas UPDATE activas:', policies.length);
        policies.forEach(policy => {
          console.log(`   - ${policy.policyname}`);
        });
      }
    } catch (e) {
      console.log('‚ö†Ô∏è Error verificando pol√≠ticas desde el navegador');
    }

  } catch (error) {
    console.error('‚ùå Error general en diagn√≥stico:', error);
  }

  console.log('üéØ === DIAGN√ìSTICO COMPLETADO ===');
})();

// ============================================================================
// INTERPRETACI√ìN DE RESULTADOS:
// ============================================================================
// ‚úÖ Usuario autenticado + Contrato cargado + Permiso de edici√≥n + Edici√≥n exitosa
//    ‚Üí TODO FUNCIONA - El bot√≥n deber√≠a aparecer
//
// ‚ùå Usuario autenticado + Contrato cargado + PERO "No tienes permisos"
//    ‚Üí Problema: No eres owner/applicant de este contrato
//
// ‚ùå Usuario NO autenticado
//    ‚Üí Problema: Debes iniciar sesi√≥n
//
// ‚ùå Error "permission denied" al cargar contrato
//    ‚Üí Problema: RLS bloqueando lectura, ejecuta SOLUCION_RAPIDA_EDICION_CONTRATOS.sql
//
// ‚ùå Contrato no encontrado
//    ‚Üí Problema: ID incorrecto o contrato no existe
// ============================================================================
