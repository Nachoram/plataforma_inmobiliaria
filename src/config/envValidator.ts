/**
 * M√≥dulo de Validaci√≥n de Variables de Entorno
 *
 * Este m√≥dulo valida que todas las variables de entorno cr√≠ticas est√©n
 * configuradas correctamente antes de que la aplicaci√≥n se inicialice.
 * Implementa el patr√≥n "fail-fast" para detectar errores de configuraci√≥n
 * lo m√°s temprano posible.
 */

/**
 * Variables de entorno cr√≠ticas requeridas por la aplicaci√≥n
 */
const REQUIRED_ENV_VARS = {
  VITE_SUPABASE_URL: 'URL del proyecto de Supabase',
  VITE_SUPABASE_ANON_KEY: 'Clave an√≥nima de Supabase'
} as const;

/**
 * Valida que todas las variables de entorno cr√≠ticas est√©n presentes y v√°lidas
 *
 * @throws {Error} Si alguna variable de entorno faltante o inv√°lida
 */
export function validateEnvironment(): void {
  const missingVars: string[] = [];
  const invalidVars: string[] = [];

  // Verificar cada variable requerida
  Object.entries(REQUIRED_ENV_VARS).forEach(([envVar, description]) => {
    const value = (import.meta.env as Record<string, string | undefined>)[envVar];

    // Verificar que existe
    if (value === undefined) {
      missingVars.push(envVar);
      return;
    }

    // Verificar que no est√© vac√≠a
    if (typeof value === 'string' && value.trim() === '') {
      invalidVars.push(`${envVar} (valor vac√≠o)`);
      return;
    }

    // Validaciones espec√≠ficas por variable
    if (envVar === 'VITE_SUPABASE_URL') {
      if (!value.startsWith('https://') || !value.includes('.supabase.co')) {
        invalidVars.push(`${envVar} (formato inv√°lido: debe ser una URL de Supabase v√°lida)`);
      }
    }

    if (envVar === 'VITE_SUPABASE_ANON_KEY') {
      if (value.length < 20) {
        invalidVars.push(`${envVar} (parece ser una clave inv√°lida o de prueba)`);
      }
    }
  });

  // Si hay variables faltantes, mostrar error fatal
  if (missingVars.length > 0) {
    const errorMessage = `
üö® ERROR CR√çTICO DE CONFIGURACI√ìN üö®

Faltan las siguientes variables de entorno requeridas:
${missingVars.map(v => `‚Ä¢ ${v} (${REQUIRED_ENV_VARS[v as keyof typeof REQUIRED_ENV_VARS]})`).join('\n')}

üìù SOLUCI√ìN:
1. Crea o verifica que existe el archivo '.env' en la ra√≠z del proyecto
2. Agrega las siguientes l√≠neas al archivo .env:

VITE_SUPABASE_URL=https://tu-proyecto.supabase.co
VITE_SUPABASE_ANON_KEY=tu-clave-anonima-aqui

3. Reinicia el servidor de desarrollo con: npm run dev

üîç Para obtener estos valores:
‚Ä¢ Ve a https://supabase.com/dashboard/projects
‚Ä¢ Selecciona tu proyecto
‚Ä¢ Ve a Settings > API
‚Ä¢ Copia la "Project URL" para VITE_SUPABASE_URL
‚Ä¢ Copia la "anon public" key para VITE_SUPABASE_ANON_KEY

La aplicaci√≥n no puede continuar sin estas configuraciones cr√≠ticas.
    `.trim();

    console.error(errorMessage);
    throw new Error(`Configuraci√≥n de entorno incompleta: ${missingVars.join(', ')}`);
  }

  // Si hay variables inv√°lidas, mostrar error fatal
  if (invalidVars.length > 0) {
    const errorMessage = `
üö® ERROR CR√çTICO DE CONFIGURACI√ìN üö®

Las siguientes variables de entorno tienen valores inv√°lidos:
${invalidVars.map(v => `‚Ä¢ ${v}`).join('\n')}

üìù SOLUCI√ìN:
Verifica que los valores en tu archivo .env sean correctos y reinicia el servidor.

üîç Recuerda:
‚Ä¢ La URL debe comenzar con https:// y contener .supabase.co
‚Ä¢ La clave an√≥nima debe ser una cadena larga (t√≠picamente comienza con "eyJ")

La aplicaci√≥n no puede continuar con configuraciones inv√°lidas.
    `.trim();

    console.error(errorMessage);
    throw new Error(`Configuraci√≥n de entorno inv√°lida: ${invalidVars.join(', ')}`);
  }

  // Si todo est√° bien, mostrar confirmaci√≥n
  console.log('‚úÖ Configuraci√≥n de entorno validada correctamente');
  console.log(`üåê Supabase URL: ${import.meta.env.VITE_SUPABASE_URL}`);
  console.log(`üîë Clave an√≥nima: ${import.meta.env.VITE_SUPABASE_ANON_KEY ? 'Presente ‚úì' : 'Ausente ‚úó'}`);
}

/**
 * Funci√≥n de conveniencia para obtener variables de entorno validadas
 * √ötil para componentes que necesitan acceso directo a las variables
 */
export function getValidatedEnv(): {
  VITE_SUPABASE_URL: string;
  VITE_SUPABASE_ANON_KEY: string;
} {
  // Re-validar para asegurar consistencia (aunque ya se valid√≥ al inicio)
  validateEnvironment();

  return {
    VITE_SUPABASE_URL: import.meta.env.VITE_SUPABASE_URL!,
    VITE_SUPABASE_ANON_KEY: import.meta.env.VITE_SUPABASE_ANON_KEY!
  };
}
