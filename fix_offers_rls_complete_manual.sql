-- =====================================================
-- SOLUCI√ìN COMPLETA PARA ERRORES 403 EN TABLA OFFERS
-- Corrige los errores: GET /rest/v1/offers 403 (Forbidden)
-- =====================================================

-- PASO 1: DIAGN√ìSTICO INICIAL
DO $$
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üîç ===== DIAGN√ìSTICO INICIAL TABLA OFFERS =====';
    RAISE NOTICE '';
END $$;

-- Verificar si la tabla exists
SELECT CASE 
    WHEN EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'offers') 
    THEN '‚úÖ Tabla "offers" existe'
    ELSE '‚ùå ERROR: Tabla "offers" NO existe'
END as tabla_status;

-- Verificar estructura de la tabla
SELECT 
    'üìã Estructura de la tabla offers:' as info;
    
SELECT 
    column_name,
    data_type,
    is_nullable,
    CASE 
        WHEN column_name = 'offerer_id' THEN 'üîë CLAVE PARA RLS - Identifica quien hizo la oferta'
        WHEN column_name = 'property_id' THEN 'üè† RELACI√ìN - Conecta con propiedades'
        WHEN column_name = 'id' THEN 'üÜî PRIMARY KEY'
        ELSE 'üìù Datos adicionales'
    END as importancia_rls
FROM information_schema.columns 
WHERE table_schema = 'public' AND table_name = 'offers'
ORDER BY ordinal_position;

-- PASO 2: LIMPIAR ESTADO ACTUAL
DO $$
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üßπ ===== LIMPIANDO POL√çTICAS EXISTENTES =====';
    RAISE NOTICE '';
END $$;

-- Habilitar RLS (por si no estaba habilitado)
ALTER TABLE public.offers ENABLE ROW LEVEL SECURITY;

-- Eliminar todas las pol√≠ticas existentes para empezar limpio
DROP POLICY IF EXISTS "offers_select_policy" ON public.offers;
DROP POLICY IF EXISTS "offers_insert_policy" ON public.offers;
DROP POLICY IF EXISTS "offers_update_policy" ON public.offers;
DROP POLICY IF EXISTS "offers_delete_policy" ON public.offers;
DROP POLICY IF EXISTS "Users can view their own offers or offers on their properties" ON public.offers;
DROP POLICY IF EXISTS "Users can create their own offers" ON public.offers;
DROP POLICY IF EXISTS "Users can update their own offers" ON public.offers;
DROP POLICY IF EXISTS "Users can delete their own offers" ON public.offers;
DROP POLICY IF EXISTS "Enable read access for users on their own offers" ON public.offers;
DROP POLICY IF EXISTS "Enable read access for property owners" ON public.offers;

-- PASO 3: CREAR POL√çTICAS RLS OPTIMIZADAS
DO $$
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üîí ===== CREANDO NUEVAS POL√çTICAS RLS =====';
    RAISE NOTICE '';
END $$;

-- POL√çTICA SELECT: Los usuarios pueden ver:
-- 1. Ofertas que ellos hicieron (offerer_id = auth.uid())
-- 2. Ofertas en sus propiedades (si son due√±os de la propiedad)
CREATE POLICY "offers_select_authenticated" 
ON public.offers FOR SELECT 
USING (
    auth.role() = 'authenticated' AND (
        -- Puede ver sus propias ofertas
        auth.uid() = offerer_id OR 
        -- Puede ver ofertas en propiedades que posee
        EXISTS (
            SELECT 1 FROM public.properties 
            WHERE properties.id = offers.property_id 
            AND properties.owner_id = auth.uid()
        )
    )
);

-- POL√çTICA INSERT: Solo usuarios autenticados pueden crear ofertas para s√≠ mismos
CREATE POLICY "offers_insert_authenticated" 
ON public.offers FOR INSERT 
WITH CHECK (
    auth.role() = 'authenticated' AND 
    auth.uid() = offerer_id
);

-- POL√çTICA UPDATE: Solo pueden actualizar sus propias ofertas
CREATE POLICY "offers_update_own" 
ON public.offers FOR UPDATE 
USING (
    auth.role() = 'authenticated' AND 
    auth.uid() = offerer_id
);

-- POL√çTICA DELETE: Solo pueden eliminar sus propias ofertas
CREATE POLICY "offers_delete_own" 
ON public.offers FOR DELETE 
USING (
    auth.role() = 'authenticated' AND 
    auth.uid() = offerer_id
);

-- PASO 4: VERIFICACI√ìN COMPLETA
DO $$
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE '‚úÖ ===== VERIFICACI√ìN DE POL√çTICAS CREADAS =====';
    RAISE NOTICE '';
END $$;

-- Verificar que RLS est√° habilitado
SELECT 
    'üîí Estado RLS:' as verificacion,
    CASE 
        WHEN rowsecurity = true THEN '‚úÖ RLS HABILITADO'
        ELSE '‚ùå RLS DESHABILITADO - ERROR'
    END as estado
FROM pg_tables 
WHERE schemaname = 'public' AND tablename = 'offers';

-- Listar todas las pol√≠ticas creadas
SELECT 
    'üìã Pol√≠ticas creadas:' as verificacion;
    
SELECT 
    policyname,
    cmd as operacion,
    CASE cmd
        WHEN 'SELECT' THEN 'üîç Ver ofertas propias + ofertas en propiedades propias'
        WHEN 'INSERT' THEN '‚ûï Crear ofertas para uno mismo'
        WHEN 'UPDATE' THEN '‚úèÔ∏è Modificar ofertas propias'
        WHEN 'DELETE' THEN 'üóëÔ∏è Eliminar ofertas propias'
    END as descripcion
FROM pg_policies 
WHERE tablename = 'offers'
ORDER BY cmd, policyname;

-- PASO 5: PRUEBAS DE FUNCIONALIDAD (SIMULADAS)
DO $$
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üß™ ===== PRUEBAS DE FUNCIONALIDAD =====';
    RAISE NOTICE '';
    RAISE NOTICE '‚úÖ Las siguientes consultas deber√≠an funcionar ahora:';
    RAISE NOTICE '';
    RAISE NOTICE '1. OffersPage.tsx l√≠nea ~99:';
    RAISE NOTICE '   SELECT * FROM offers WHERE offerer_id = auth.uid()';
    RAISE NOTICE '   ‚Üí Ver ofertas que el usuario envi√≥';
    RAISE NOTICE '';
    RAISE NOTICE '2. OffersPage.tsx l√≠nea ~73:';
    RAISE NOTICE '   SELECT * FROM offers WHERE property_id IN (SELECT id FROM properties WHERE owner_id = auth.uid())';
    RAISE NOTICE '   ‚Üí Ver ofertas recibidas en propiedades del usuario';
    RAISE NOTICE '';
    RAISE NOTICE '3. MyActivityPage.tsx l√≠nea ~63:';
    RAISE NOTICE '   SELECT * FROM offers WHERE offerer_id = auth.uid()';
    RAISE NOTICE '   ‚Üí Ver actividad de ofertas del usuario';
    RAISE NOTICE '';
END $$;

-- PASO 6: MENSAJE FINAL
DO $$
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üéâ ===== CORRECCI√ìN COMPLETADA =====';
    RAISE NOTICE '';
    RAISE NOTICE '‚úÖ PROBLEMAS SOLUCIONADOS:';
    RAISE NOTICE '   ‚Ä¢ GET /rest/v1/offers 403 (Forbidden)';
    RAISE NOTICE '   ‚Ä¢ Error "permission denied for table offers"';
    RAISE NOTICE '   ‚Ä¢ OffersPage.tsx Error fetching sent offers';
    RAISE NOTICE '   ‚Ä¢ MyActivityPage.tsx Error fetching offers';
    RAISE NOTICE '';
    RAISE NOTICE 'üîí SEGURIDAD GARANTIZADA:';
    RAISE NOTICE '   ‚Ä¢ Usuarios solo ven ofertas relevantes para ellos';
    RAISE NOTICE '   ‚Ä¢ Propietarios ven ofertas en sus propiedades';
    RAISE NOTICE '   ‚Ä¢ Nadie puede modificar ofertas de otros';
    RAISE NOTICE '';
    RAISE NOTICE 'üöÄ PR√ìXIMO PASO:';
    RAISE NOTICE '   Recargar la aplicaci√≥n y probar OffersPage.tsx';
    RAISE NOTICE '';
    RAISE NOTICE 'üìû Si persisten errores, verificar:';
    RAISE NOTICE '   1. Usuario est√° autenticado (auth.uid() no es null)';
    RAISE NOTICE '   2. Tokens de sesi√≥n est√°n actualizados';
    RAISE NOTICE '   3. Tabla "properties" tiene policies correctas';
    RAISE NOTICE '';
END $$;

-- CONSULTA FINAL: Contar registros (opcional para verificar que hay datos)
SELECT 
    '‚ÑπÔ∏è Informaci√≥n adicional:' as info,
    COUNT(*) as total_ofertas,
    COUNT(DISTINCT offerer_id) as usuarios_con_ofertas,
    COUNT(DISTINCT property_id) as propiedades_con_ofertas
FROM public.offers;

