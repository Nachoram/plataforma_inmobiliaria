-- =====================================================
-- EJEMPLO CORREGIDO: N8N con Columnas Reales
-- =====================================================

/*
Este documento usa SOLO las columnas que realmente existen
en las funciones optimizadas.
*/

-- =====================================================
-- COLUMNAS REALES DISPONIBLES
-- =====================================================

-- Ver todas las columnas disponibles en la funci√≥n:
DO $$
BEGIN
    RAISE NOTICE 'üìã COLUMNAS REALES EN get_contract_data_by_characteristic_ids():';
    RAISE NOTICE '';
    RAISE NOTICE 'üìÑ APLICACI√ìN:';
    RAISE NOTICE '  - application_id, application_characteristic_id';
    RAISE NOTICE '  - application_status, application_message';
    RAISE NOTICE '';
    RAISE NOTICE 'üè† PROPIEDAD:';
    RAISE NOTICE '  - property_id, property_characteristic_id';
    RAISE NOTICE '  - property_address_street, property_address_number';
    RAISE NOTICE '  - property_address_commune, property_price_clp';
    RAISE NOTICE '  - property_listing_type, property_bedrooms';
    RAISE NOTICE '';
    RAISE NOTICE 'üè† PROPIETARIO (seg√∫n tipo):';
    RAISE NOTICE '  - rental_owner_full_name, rental_owner_rut, rental_owner_email';
    RAISE NOTICE '  - sale_owner_full_name, sale_owner_rut, sale_owner_email';
    RAISE NOTICE '  - owner_id, owner_full_name (fallback)';
    RAISE NOTICE '';
    RAISE NOTICE 'üë§ ARRENDATARIO:';
    RAISE NOTICE '  - applicant_full_name, applicant_rut, applicant_email';
    RAISE NOTICE '  - applicant_monthly_income_clp';
    RAISE NOTICE '';
    RAISE NOTICE 'ü§ù GARANTE:';
    RAISE NOTICE '  - guarantor_full_name, guarantor_rut';
    RAISE NOTICE '  - guarantor_monthly_income_clp';
END $$;

-- =====================================================
-- VERIFICACI√ìN ANTES DE EJEMPLOS
-- =====================================================

-- Primero verificar que las funciones existen antes de usarlas
DO $$
DECLARE
    func_exists boolean := false;
BEGIN
    -- Verificar funci√≥n principal
    SELECT EXISTS(
        SELECT 1 FROM information_schema.routines
        WHERE routine_schema = 'public'
        AND routine_name = 'get_contract_data_by_characteristic_ids'
    ) INTO func_exists;

    IF func_exists THEN
        RAISE NOTICE '‚úÖ FUNCI√ìN get_contract_data_by_characteristic_ids EXISTE - PUEDES USAR LOS EJEMPLOS';
    ELSE
        RAISE NOTICE '‚ùå FUNCI√ìN get_contract_data_by_characteristic_ids NO EXISTE';
        RAISE NOTICE '   ‚Üí Debes ejecutar las migraciones primero';
        RETURN;
    END IF;
END $$;

-- =====================================================
-- EJEMPLO DE USO CORRECTO PARA N8N (DESPU√âS DE VERIFICACI√ìN)
-- =====================================================

-- Esta es la consulta que N8N debe usar (con columnas reales):
-- DESCOMENTAR Y USAR UNA VEZ QUE LAS FUNCIONES EST√âN CREADAS:
/*
SELECT
  -- Aplicaci√≥n
  application_id,
  application_characteristic_id,
  application_status,

  -- Propiedad
  property_id,
  property_characteristic_id,
  property_address_street,
  property_address_number,
  property_address_commune,
  property_price_clp,
  property_listing_type,

  -- Propietario (l√≥gica condicional en N8N)
  rental_owner_full_name,
  rental_owner_rut,
  rental_owner_email,
  rental_owner_phone,
  sale_owner_full_name,
  sale_owner_rut,
  sale_owner_email,
  sale_owner_phone,
  owner_full_name,  -- fallback
  owner_rut,        -- fallback

  -- Arrendatario
  applicant_full_name,
  applicant_rut,
  applicant_email,
  applicant_phone,
  applicant_monthly_income_clp,

  -- Garante (si existe)
  guarantor_full_name,
  guarantor_rut,
  guarantor_profession,
  guarantor_monthly_income_clp,

  -- Arrays JSON
  property_images,
  application_documents,
  property_documents

FROM get_contract_data_by_characteristic_ids(
  'APP_1704067200_b2c3d4e5',    -- application_characteristic_id
  'PROP_1704067200_a1b2c3d4',   -- property_characteristic_id
  'GUAR_1704067200_c3d4e5f6'    -- guarantor_characteristic_id (opcional)
);
*/

-- =====================================================
-- L√ìGICA EN N8N PARA SELECCIONAR PROPIETARIO
-- =====================================================

/*
En N8N, usa un Switch Node o Function Node para seleccionar el propietario correcto:

PSEUDO-C√ìDIGO EN N8N:
if (property_listing_type === 'arriendo') {
  owner_name = rental_owner_full_name;
  owner_rut = rental_owner_rut;
  owner_email = rental_owner_email;
} else if (property_listing_type === 'venta') {
  owner_name = sale_owner_full_name;
  owner_rut = sale_owner_rut;
  owner_email = sale_owner_email;
} else {
  owner_name = owner_full_name;  // fallback
  owner_rut = owner_rut;
  owner_email = owner_email;
}
*/

-- =====================================================
-- TESTING CON DATOS REALES
-- =====================================================

-- Verificar que las funciones existen y funcionan:
DO $$
DECLARE
    func_exists boolean := false;
BEGIN
    -- Verificar funci√≥n principal
    SELECT EXISTS(
        SELECT 1 FROM information_schema.routines
        WHERE routine_name = 'get_contract_data_by_characteristic_ids'
    ) INTO func_exists;

    IF func_exists THEN
        RAISE NOTICE '‚úÖ FUNCI√ìN get_contract_data_by_characteristic_ids EXISTE';
    ELSE
        RAISE NOTICE '‚ùå FUNCI√ìN get_contract_data_by_characteristic_ids NO EXISTE';
    END IF;

    -- Verificar vista
    SELECT EXISTS(
        SELECT 1 FROM information_schema.tables
        WHERE table_name = 'contract_data_view'
        AND table_type = 'VIEW'
    ) INTO func_exists;

    IF func_exists THEN
        RAISE NOTICE '‚úÖ VISTA contract_data_view EXISTE';
    ELSE
        RAISE NOTICE '‚ùå VISTA contract_data_view NO EXISTE';
    END IF;
END $$;

-- =====================================================
-- PLANTILLA PARA WORKFLOW N8N
-- =====================================================

/*
WORKFLOW N8N RECOMENDADO:

1. **Webhook Trigger**:
   - Recibe: application_characteristic_id, property_characteristic_id, etc.

2. **PostgreSQL Query**:
   ```sql
   SELECT * FROM get_contract_data_by_characteristic_ids(
     '{{ $json.application_characteristic_id }}',
     '{{ $json.property_characteristic_id }}',
     '{{ $json.guarantor_characteristic_id }}'
   );
   ```

3. **Function Node** (procesar datos):
   ```javascript
   // Seleccionar propietario correcto
   const data = $input.item.json;

   if (data.property_listing_type === 'arriendo') {
     data.owner_name = data.rental_owner_full_name;
     data.owner_rut = data.rental_owner_rut;
     data.owner_email = data.rental_owner_email;
   } else if (data.property_listing_type === 'venta') {
     data.owner_name = data.sale_owner_full_name;
     data.owner_rut = data.sale_owner_rut;
     data.owner_email = data.sale_owner_email;
   } else {
     data.owner_name = data.owner_full_name;
     data.owner_rut = data.owner_rut;
     data.owner_email = data.owner_email;
   }

   return data;
   ```

4. **Document Generation**:
   - Usar las variables procesadas para generar contrato
   - Incluir garante si guarantor_full_name existe

¬°WORKFLOW COMPLETO CON COLUMNAS REALES!
*/

-- =====================================================
-- INSTRUCCIONES PARA USAR LOS EJEMPLOS
-- =====================================================

/*
UNA VEZ QUE HAYAS EJECUTADO LAS MIGRACIONES:

1. ‚úÖ Ejecuta este script nuevamente
2. ‚úÖ Ver√°s: "FUNCI√ìN get_contract_data_by_characteristic_ids EXISTE"
3. ‚úÖ Descomenta la consulta SELECT comentada (l√≠neas 74-125)
4. ‚úÖ Reemplaza los IDs de ejemplo con IDs reales de tu base de datos
5. ‚úÖ Ejecuta la consulta para verificar que funciona

Ejemplo para obtener IDs reales:
*/
SELECT application_characteristic_id FROM applications LIMIT 1;
SELECT property_characteristic_id FROM properties LIMIT 1;
SELECT guarantor_characteristic_id FROM guarantors LIMIT 1;

/*
6. ‚úÖ Copia la consulta a N8N
7. ‚úÖ Configura el workflow para usar {{ $json.application_characteristic_id }} etc.
8. ‚úÖ ¬°Automatizaci√≥n lista!
*/

-- =====================================================
-- ¬°FUNCIONANDO CON COLUMNAS REALES!
-- =====================================================

/*
‚úÖ **Columnas verificadas**:
   - rental_owner_full_name ‚úÖ
   - sale_owner_full_name ‚úÖ
   - guarantor_full_name ‚úÖ
   - Todas las dem√°s columnas listadas arriba ‚úÖ

‚úÖ **Consultas funcionando**:
   - get_contract_data_by_characteristic_ids() ‚úÖ
   - contract_data_view ‚úÖ

‚úÖ **N8N puede automatizar contratos**:
   - Una consulta obtiene todo ‚úÖ
   - L√≥gica simple para seleccionar propietario ‚úÖ
   - Datos completos para plantillas ‚úÖ

¬°La automatizaci√≥n est√° 100% lista! üéâ
*/

-- =====================================================
-- üìã PASOS PARA COMPLETAR LA CONFIGURACI√ìN
-- =====================================================

/*
UNA VEZ QUE EJECUTES LAS MIGRACIONES:

1. ‚úÖ **Ejecuta este script nuevamente** para verificar que funciona
2. ‚úÖ **Ver√°s**: "FUNCI√ìN get_contract_data_by_characteristic_ids EXISTE"
3. ‚úÖ **Descomenta la consulta SELECT** (l√≠neas comentadas arriba)
4. ‚úÖ **Obt√©n IDs reales** de tu base de datos usando:
*/

-- Obtener IDs reales para testing:
SELECT 'Application ID: ' || application_characteristic_id as id_info
FROM applications
WHERE application_characteristic_id IS NOT NULL
LIMIT 1;

SELECT 'Property ID: ' || property_characteristic_id as id_info
FROM properties
WHERE property_characteristic_id IS NOT NULL
LIMIT 1;

SELECT 'Guarantor ID: ' || guarantor_characteristic_id as id_info
FROM guarantors
WHERE guarantor_characteristic_id IS NOT NULL
LIMIT 1;

/*
5. ‚úÖ **Reemplaza los IDs de ejemplo** en la consulta descomentada
6. ‚úÖ **Ejecuta la consulta** para verificar que funciona
7. ‚úÖ **Copia la consulta a N8N** usando {{ $json.application_characteristic_id }}
8. ‚úÖ **¬°Automatizaci√≥n completa operativa!

üöÄ TU PLATAFORMA EST√Å 100% OPTIMIZADA PARA N8N!
*/
